1.1 Review questions
1. This means everyone working on a project gets the whole project locally aswell.
2. They are all compatible with Git.
3. It will only commit the files in the staging area, so it will leave the unwanted changes.
4. This means a file is modified and ready to be added to the staging area
5. This means a file is already in the staging area.
6. This refers to the current branch.
7. It is a copy of the master/current branch in which you commit stuff. You can eventually merge it with the parent branch.
8. This means that git will try to put all differences together, it could ask for help

1.2

2.
awk: A programming lang. to help you do advanced text stuff.
bash: A unix command based scripting lang. 
b(un)zp2: For file (de-)compression.
cat: Displaying content of a file.
curl: Is used to transfer data from and to a server.
diff: Compares files and shows the difference.
less: Displays less then cat.
OpenSsl: toolkit for ssl encryption, mostly used for ssl sockets.
perl: A programming lang. that is similar to awk which can replace unix shell scripts.
tar: An archiving tool.
vim: A text editor.

5. 
object directory: This contains hashes with content. This is used for version control.
refs directory: This contains the references the content hashes of each branch.
Head files: This file stores what the current branch is.

1.3
1. 
< means file 1 > means file 2.
a: add
d: delete
c: changed
unified: 
+ means added line
- means removed line
2. It displays the two files we added and does not know what to do with them.
3. modified, added and removed.
6. The difference is on line 4, it will remove one line and add one.
7. the old already commited one.
8. It will say that there are no changes, so a commit is unnecessary.
9. Git will only show differences in the commits of the staged area with this flag
10 It shows the changes of b.txt in the staged area.
11.
log ---------------------------------
commit 4231634b31f7a15f138436b8c0483c66ebfa00a1
Author: Stern Brouwer <stern1997@hotmail.nl>
Date:   Tue Nov 22 13:27:12 2016 +0100

    b.txt v2 added

commit dc60f255df3f8d041eb7fbc51aee0a77b4235e06
Author: Stern Brouwer <stern1997@hotmail.nl>
Date:   Tue Nov 22 13:20:26 2016 +0100

    b.txt added

commit d4fc6643db59c850dca76109fc9c95814aa28860
Author: Stern Brouwer <stern1997@hotmail.nl>
Date:   Tue Nov 22 13:15:34 2016 +0100

    a.txt added
end of log ------------------------------
12. I did a "git clone ../git ../git2" and now have a copy of the repo. 

1.4
1. The cache means that it is stored in temporarily and is not yet commited.
2. git is aware that c.txt is no more after it has been added, there is a new d.txt though.
3. yes, it's aware.
4. Jup, it is.

1.5
3. in the master branch
4. a.txt and b.txt
8. I see b.txt and c.txt
9. I see all my commits and branches 
10. the files of the master branch are back in the folder.
11. master: 57323ec no_conflict d237b64
12. git will try to nerge the two branches
I means the master has not changed and git will just point master to the latest commit of the no_conflict branch
13. Like I said, it will just point to the latest commit of the no_conflict branch.

1.6
1. When two lines are modified in both branches
6.
  conflict    3d16e51 changed c.txt
* master      d237b64 [ahead 3] removed a, add b and c

8.
Auto-merging c.txt
CONFLICT (content): Merge conflict in c.txt
Automatic merge failed; fix conflicts and then commit the result.

12. 1f5c0b9

